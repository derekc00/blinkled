
BlinkLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000539  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f0  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <avr_wait>:
#include <util/delay.h>
#include "avr.h"

void avr_wait(unsigned short msec)
{
	TCCR0 = 3;
  6c:	23 e0       	ldi	r18, 0x03	; 3
  6e:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
  70:	09 c0       	rjmp	.+18     	; 0x84 <avr_wait+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  72:	83 e8       	ldi	r24, 0x83	; 131
  74:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  76:	88 b7       	in	r24, 0x38	; 56
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	88 bf       	out	0x38, r24	; 56
		while (!GET_BIT(TIFR, TOV0));
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	00 fe       	sbrs	r0, 0
  80:	fd cf       	rjmp	.-6      	; 0x7c <avr_wait+0x10>
#include "avr.h"

void avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  82:	c9 01       	movw	r24, r18
  84:	9c 01       	movw	r18, r24
  86:	21 50       	subi	r18, 0x01	; 1
  88:	31 09       	sbc	r19, r1
  8a:	89 2b       	or	r24, r25
  8c:	91 f7       	brne	.-28     	; 0x72 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  8e:	13 be       	out	0x33, r1	; 51
  90:	08 95       	ret

00000092 <main>:
int main(void)
{
	// PC0 -> input / button
	// PD7 -> output / LED
	
	SET_BIT(DDRD, PD7);			// set PD7 as output
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 68       	ori	r24, 0x80	; 128
  96:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRC, PC0);			// set PC0 as Input
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	84 bb       	out	0x14, r24	; 20
    while (1)
    {							
		if (!GET_BIT(PINC, PC0))	// check if PINC PC0 is 1 or 0 (aka 5V or gnd)
  9e:	98 99       	sbic	0x13, 0	; 19
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x20>
		{
			PORTD ^= (1 << PD7);	// flip PD7 (aka flip output pin from 0 to 1 or viceversa)
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 58       	subi	r24, 0x80	; 128
  a6:	82 bb       	out	0x12, r24	; 18
			avr_wait(500);			// delay 1/2 second
  a8:	84 ef       	ldi	r24, 0xF4	; 244
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
  b0:	f6 cf       	rjmp	.-20     	; 0x9e <main+0xc>
			
		} else {
			CLR_BIT(PORTD, PD7);	// turn off LED off when button not pressed
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	f2 cf       	rjmp	.-28     	; 0x9e <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
